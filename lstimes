#!/usr/bin/env python
#
# lstimes
# 2016-02-05: Written by Steven J. DeRose.
#
from __future__ import print_function
import sys, os, argparse
import stat
import pwd

__metadata__ = {
    'title'        : "lstimes",
    'rightsHolder' : "Steven J. DeRose",
    'creator'      : "http://viaf.org/viaf/50334488",
    'type'         : "http://purl.org/dc/dcmitype/Software",
    'language'     : "Python 3.7",
    'created'      : "2016-02-05",
    'modified'     : "2020-08-23",
    'publisher'    : "http://github.com/sderose",
    'license'      : "https://creativecommons.org/licenses/by-sa/3.0/"
}
__version__ = __metadata__['modified']


descr="""
=head1 Description

Show lots more information about a file than ls does.

=head1 Related Commands

C<ls>, C<stat -x>, C<file>.

=head1 Known bugs and Limitations

=head1 History

* 2016-02-05: Written by Steven J. DeRose.
* 2016-02-05, 2019-10-29: Lint.
* 2020-08-23: layout, fix report format.

=head1 To do

* INTEGRATE WITH 'lss' and maybe 'lsoutline'.

=Rights=

Copyright 2016-02-05 by Steven J. DeRose. This work is licensed under a
Creative Commons Attribution-Share-alike 3.0 unported license.
For further information on this license, see
[https://creativecommons.org/licenses/by-sa/3.0].

For the most recent version, see [http://www.derose.net/steve/utilities]
or [https://github.com/sderose].

=head1 Options
"""


def warn(lvl, msg):
    if (args.verbose >= lvl): sys.stderr.write(msg+"\n")


###############################################################################
#
def processOptions():
    try:
        from BlockFormatter import BlockFormatter
        parser = argparse.ArgumentParser(
            description=descr, formatter_class=BlockFormatter)
    except ImportError:
        parser = argparse.ArgumentParser(description=descr)

    parser.add_argument(
        "--quiet", "-q",      action='store_true',
        help='Suppress most messages.')
    parser.add_argument(
        "--verbose", "-v",    action='count',       default=0,
        help='Add more messages (repeatable).')
    parser.add_argument(
        "--version", action='version', version=__version__,
        help='Display version information, then exit.')

    parser.add_argument(
        'files',             type=str,
        nargs=argparse.REMAINDER,
        help='Path(s) to input file(s)')

    args0 = parser.parse_args()
    return(args0)


###############################################################################
#
def tryOneItem(path):
    """Try to open a file (or directory, if -r is set).
    """
    warn(1, "Starting item '%s'" % (path))
    recnum = 0
    if (not os.path.exists(path)):
        sys.stderr.write("Couldn't find '%s'.\n" % (path), stat="cantOpen")
    elif (os.path.isdir(path)):
        if (args.recursive):
            for child in os.listdir(path):
                recnum += tryOneItem(os.path.join(path,child))
        else:
            warn(0, "Skipping directory '%s'." % (path))
    else:
        doOneFile(path)
    return(recnum)


###############################################################################
#
def getFileFlagChar(path):
    if (os.path.isdir(path)): return("/")
    return("")

FMT = "%9s%1s %3d %8s %6s %6s %16s %16s %16s %16s %1s %s"
def printHeader():
    print(FMT %
        ('per', 'lnk', 'eh',
         'usr', 'grp', 'sz',  'ct',
         'mt',  'at',  'nm',  'flag', 'dir'))
    return

def doOneFile(path):
    """Deal with one individual file.
    """
    s = os.stat(path)  # follow_symlinks?
    mode = s.st_mode	# protection bits,
    #ino = s.st_ino	# inode number,
    #dev = s.st_dev	# device,
    #nl  = s.st_nlink	# number of hard links,
    uid = s.st_uid	# user id of owner,
    #gid = s.st_gid	# group id of owner,
    sz  = s.st_size	# size of file, in bytes,
    at  = s.st_atime	# time of most recent access,
    mt  = s.st_mtime	# time of most recent content modification,
    ct  = s.st_ctime	# time of last metadata change on Unix; cre on Win

    dirName = os.path.isdir(path)
    lnk = os.path.islink(path)
    eh  = -1
    usr = pwd.getpwuid(uid)[0]
    #grp = grp.getgrgid(gid)[0]
    grp = "???"
    #sz  = os.path.getsize(path)
    #ct  = os.path.getctime(path)
    #mt  = os.path.getmtime(path)
    #at  = os.path.getatime(path)
    nm  = os.path.basename(path)
    flag = getFileFlagChar(path)

    filemode0 = stat.filemode(mode)
    print(FMT %
        (filemode0, lnk, eh, usr, grp, sz, ct, mt, at, nm, flag, dirName))


###############################################################################
# Main
#
args = processOptions()

if (len(args.files) == 0):
    warn(0, "No files specified....")
    sys.exit()

for f in (args.files):
    doOneFile(f)
