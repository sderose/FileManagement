#!/usr/bin/env python3
#
# findAncestorDirectory.py: Look upwards for a file or directory.
# 2021-12-02: Written by Steven J. DeRose.
#
import sys
import os
import re
#from typing import IO, Dict, List, Union

__metadata__ = {
    "title"        : "findAncestorDirectory",
    "description"  : "Look upwards for a file or directory.",
    "rightsHolder" : "Steven J. DeRose",
    "creator"      : "http://viaf.org/viaf/50334488",
    "type"         : "http://purl.org/dc/dcmitype/Software",
    "language"     : "Python 3.7 (original was Perl)",
    "created"      : "2007-10-05",
    "modified"     : "2022-02-28",
    "publisher"    : "http://github.com/sderose",
    "license"      : "https://creativecommons.org/licenses/by-sa/3.0/"
}
__version__ = __metadata__["modified"]

descr = """
=Description=

==Usage==

    findAncestorDirectory.py [options] [target]

[target] is interpreted as a regular expression, and allows partial matches (use "^"
and/or "$" to tie it to the start and/or end of names).

Locates the nearest ancestor directory (or the starting directory itself)
whose ''own name'' matches [target].
for example, to find the containing "source" directory (if any):
    findAncestorDdirectory source
    
With `-c` or `--child`, it instead looks for an ancestor directory (or self) 
of any name, but that ''contains'' a file or directory that matches [target].
This is handy for locating "inherited" items such as .git, .pyenv, etc.

For example, the following finds which containing directory represents the entire
git repository (since that ancestor will have a subdirectory named ".git"):
    findAncestorDirectory -c \\.git$
    
The "$" prevents matches that merely ''start' with ".git", such as "\\.gitignore".

You can use the result to '''cd''' to the found directory. For example:
    alias theGitDir='cd `findAncestorDdirectory \\.git`

On failure, the command
* prints "." (unless `--nil` is specified).  This is so passing it to `cd` doesn't do anything.
* displays a message on stderr (unless --quiet) is specified).
* returns status 99.


=Related Commands=


=Known bugs and Limitations=


=To do=

Add --all to keep going in case there are multiple matches.


=History=

* 2007-10-05: Written by Steven J. DeRose. Original in Perl.
* 2007-11-26 sjd: strict, Getopt.
* 2012-09-12: ?
* 2021-12-02: New layout. Add --file. Port to Python.
* 2022-02-28ff: Add error message when target not found. Add -v messages.
Improve doc, rename --file to --child. Add --all.


=Rights=

Copyright 2007-10-05 by Steven J. DeRose. This work is licensed under a
Creative Commons Attribution-Share-alike 3.0 unported license.
See [http://creativecommons.org/licenses/by-sa/3.0/] for more information.

For the most recent version, see [http://www.derose.net/steve/utilities]
or [https://github.com/sderose].


=Options=
"""

def warning(m):
    sys.stderr.write(m+"\n")
    

###############################################################################
# Main
#
if __name__ == "__main__":
    import argparse

    def processOptions() -> argparse.Namespace:
        try:
            from BlockFormatter import BlockFormatter
            parser = argparse.ArgumentParser(
                description=descr, formatter_class=BlockFormatter)
        except ImportError:
            parser = argparse.ArgumentParser(description=descr)

        parser.add_argument(
            "--all", "-a", action="store_true",
            help="Find all matching ancestors, not just the first.")
        parser.add_argument(
            "--child", "--containing", "-c", action="store_true",
            help="Look for ancester directory *containing* a matching file.")
        parser.add_argument(
            "--ignoreCase", "-i", action="store_true",
            help="Disregard case distinctions.")
        parser.add_argument(
            "--nil", action="store_true",
            help="Print nothing (instead of default '.') on failure.")
        parser.add_argument(
            "--quiet", "-q", action="store_true",
            help="Suppress most messages.")
        parser.add_argument(
            "--verbose", "-v", action="count", default=0,
            help="Add more messages (repeatable).")
        parser.add_argument(
            "--version", action="version", version=__version__,
            help="Display version information, then exit.")

        parser.add_argument(
            "target", type=str,
            help="String or regex to look for.")

        args0 = parser.parse_args()
        return(args0)


    ###########################################################################
    #
    args = processOptions()
    reFlags = re.I if args.ignoreCase else 0
    
    nFound = 0
    curDir = os.environ["PWD"]
    while (curDir and curDir != "/"):
        parent, lastPart = os.path.split(curDir)
        if (args.verbose): warning(
            "At %s." % (curDir))
        if (args.child):
            for x in os.listdir(curDir):
                if (re.search(args.target, x, flags=reFlags)):
                    print(curDir)
                    nFound += 1
                if (nFound and not args.all): break
        else:
            if (re.search(args.target, lastPart, flags=reFlags)):
                print(curDir)
                nFound += 1
        if (nFound and not args.all): break
        curDir = parent
        
    if (nFound == 0):
        if (not args.nil): 
            if (not args.quiet): warning("No matching ancestor.")
            print(".")
        sys.exit(99)
