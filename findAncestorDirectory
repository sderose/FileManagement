#!/usr/bin/env python3
#
# findAncestorDirectory.py: Look upwards for a file or directory.
# 2021-12-02: Written by Steven J. DeRose.
#
import sys
import os
import re
#from typing import IO, Dict, List, Union

#from sjdUtils import sjdUtils
#from alogging import ALogger
#su = sjdUtils()
#lg = ALogger(1)

__metadata__ = {
    "title"        : "findAncestorDirectory.py",
    "description"  : "Look upwards for a file or directory.",
    "rightsHolder" : "Steven J. DeRose",
    "creator"      : "http://viaf.org/viaf/50334488",
    "type"         : "http://purl.org/dc/dcmitype/Software",
    "language"     : "Python 3.7 (original was Perl)",
    "created"      : "2007-10-05",
    "modified"     : "2021-12-02",
    "publisher"    : "http://github.com/sderose",
    "license"      : "https://creativecommons.org/licenses/by-sa/3.0/"
}
__version__ = __metadata__["modified"]

descr = """
=Description=

==Usage==

    findAncestorDirectory.py [options] [nameOrRegex]

Locates the nearest ancestor directory whose name contains [name].
Most useful when passed to cd, for example:

    alias upto='cd `findAncestorDdirectory $1`

Returns '.' on failure, so that passing it to C<cd> just doesn't do anything
(unless `--nil` is specified, in which case it prints nothing).

With `-f` or `--file`, instead looks for an ancestor directory that contains a file
that matches `[nameOrRegex]`.


=Related Commands=


=Known bugs and Limitations=


=To do=


=History=

* 2007-10-05: Written by Steven J. DeRose. Original in Perl.
* 2007-11-26 sjd: strict, Getopt.
* 2012-09-12: ?
* 2021-12-02: New layout. Add --file. Port to Python.


=Rights=

Copyright 2007-10-05 by Steven J. DeRose. This work is licensed under a
Creative Commons Attribution-Share-alike 3.0 unported license.
See [http://creativecommons.org/licenses/by-sa/3.0/] for more information.

For the most recent version, see [http://www.derose.net/steve/utilities]
or [https://github.com/sderose].


=Options=
"""


###############################################################################
# Main
#
if __name__ == "__main__":
    import argparse

    def processOptions() -> argparse.Namespace:
        try:
            from BlockFormatter import BlockFormatter
            parser = argparse.ArgumentParser(
                description=descr, formatter_class=BlockFormatter)
        except ImportError:
            parser = argparse.ArgumentParser(description=descr)

        parser.add_argument(
            "--file", "-f", action="store_true",
            help="Look for ancester directory containg a matching file (instead of dir name itself).")
        parser.add_argument(
            "--ignoreCase", "-i", action="store_true",
            help="Disregard case distinctions.")
        parser.add_argument(
            "--nil", action="store_true",
            help="Print nothing (instead of default '.') on failure.")
        parser.add_argument(
            "--quiet", "-q", action="store_true",
            help="Suppress most messages.")
        parser.add_argument(
            "--verbose", "-v", action="count", default=0,
            help="Add more messages (repeatable).")
        parser.add_argument(
            "--version", action="version", version=__version__,
            help="Display version information, then exit.")

        parser.add_argument(
            "target", type=str,
            help="String or regex to look for.")

        args0 = parser.parse_args()
        return(args0)


    ###########################################################################
    #
    args = processOptions()
    reFlags = re.I if args.ignoreCase else 0
    
    curDir = os.environ["PWD"]
    while (curDir and curDir != "/"):
        parent, lastPart = os.path.split(curDir)
        if (args.file):
            for x in os.listdir(curDir):
                if (re.search(args.target, x, flags=reFlags)):
                    print(curDir)
                    sys.exit()
        else:
            if (re.search(args.target, lastPart, flags=reFlags)):
                print(curDir)
                sys.exit()
        curDir = parent
        
    if (not args.nil): print(".")
    sys.exit(99)