#!/usr/bin/env python
#
# nextFilename.py
#
# 2014-11-04: Written by Steven J. DeRose.
# 2015-02-06: Add --available, --width. Rename incrementFilename->nextFilename
# 2018-04-18: lint.
#
# To do:
#     Option to skip gaps.
#
from __future__ import print_function
import sys, os, re
import argparse
#import string

from MarkupHelpFormatter import MarkupHelpFormatter
from alogging import ALogger

lg = ALogger(1)

__version__ = "2018-04-18"


###############################################################################
# Process options
#
def processOptions():
    parser = argparse.ArgumentParser(
        description="""
=head1 Description

Generate the "next" or "next available" filename relative to one provided,
by using (or adding) serial numbers within the name. For example,

    nextFilename.py myFile0205.txt

would return "myFile0206.txt"

For each path provided as an argument:
    Separate the path, filename, and extension
    If there are no digits in the basename:
        Generate the number "1".
    Otherwise:
        Locate and extract the last string of digits
        Increment it
    Pad the number to at least as many digits as the original or I<--width>
    Re-insert (or append) the number in the basename
    Re-assemble path, filename, and extension
    Print the result

If I<--available> is specified, such names will be generated with larger
and larger numeric values inserted, until a name (path) is generated that
does not already exist.


=head1 Related commands

C<rename>, C<renameFiles>


=head1 Known bugs and limitations

It is possible that files with higher numbers exist, for example if
there are gaps in the sequence of extant filenames.

Existence is tested for
the literal filename, including the exact number of 0s inserted as padding.
Thus, "file01" and "file000000001" are not considered the same.

Knows nothing about OS conventions such as "Copy 12 of X", etc.

It is worth mentioning that many file-systems get slow if a single directory
contains more than about 1,000 files.


=head1 Licensing

Copyright 2014-2015, Steven J. DeRose.
Licensed under a Creative Commons
Attribution-Share Alike 3.0 Unported License. For further information on
this license, see L<http://creativecommons.org/licenses/by-sa/3.0/>.

=head1 Options

""",
        formatter_class=MarkupHelpFormatter
    )
    parser.add_argument(
        "--available",       action='store_true',
        help='Keep counting until a non-existent path is found.')
    parser.add_argument(
        "--quiet", "-q",     action='store_true',
        help='Suppress most messages.')
    parser.add_argument(
        "--verbose", "-v",   action='count',       default=0,
        help='Add more messages (repeatable).')
    parser.add_argument(
        '--version',         action='version',     version='Version of '+__version__,
        help='Display version information, then exit.')
    parser.add_argument(
        "--width",           type=int,             default=4,
        help='Zero-pad numbers to be at least this wide. Default: 4.')

    parser.add_argument(
        'names',             type=str,
        nargs=argparse.REMAINDER,
        help='Filenames or other strings to "increment."')

    return(parser.parse_args())


###############################################################################
#
def getNewPath(orig):
    dirs, basename = os.path.split(orig)
    nam, ext = os.path.splitext(basename)

    mat = re.match(r'(.*?)(\d+)(\D*)$', nam)
    if (mat):
        pre = mat.group(1)
        num = mat.group(2)
        post = mat.group(3)
    else:
        pre = nam
        num = "0"
        post = ""

    thisWidth = args.width
    if (len(num) > args.width): thisWidth = len(num)

    num = int(num) + 1
    if (args.verbose):
        sys.stderr.write("Dirs(%s) Pre(%s) Num(%d) Post(%s) Ext(%s).\n" %
        (dirs, pre, num, post, ext))

    numPadded = str(num).rjust(thisWidth, '0')
    newbasename = pre + numPadded + post + ext
    if (args.available):
        while (os.path.exists(os.path.join(dirs,newbasename))):
            num += 1
            numPadded = str(num).rjust(thisWidth, '0')
            newbasename = pre + numPadded + post + ext

    newPath = os.path.join(dirs,newbasename)
    return(newPath)


###############################################################################
###############################################################################
# Main
#
if __name__ == '__main__':
    args = processOptions()
    for n in (range(len(args.names))):
        newPath = getNewPath(args.names[n])
        if (args.verbose):
            print("%s\t%s" % (args.names[n], newPath))
        else:
            print(newPath)
    sys.exit(0)
