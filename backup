#!/usr/bin/perl -w
#
# backup: Stash some files in a time-stamped directory.
# 2006-12: Written by Steven J. DeRose.
#
use strict;
use Getopt::Long;

our %metadata = (
    "title"        => "backup",
    "description"  => "Stash some files in a time-stamped directory.",
    "rightsHolder" => "Steven J. DeRose",
    "creator"      => "http://viaf.org/viaf/50334488",
    "type"         => "http://purl.org/dc/dcmitype/Software",
    "language"     => "Perl 5.18",
    "created"      => "2006-12",
    "modified"     => "2022-04-27",
    "publisher"    => "http://github.com/sderose",
    "license"      => "https://creativecommons.org/licenses/by-sa/3.0/"
);
our $VERSION_DATE = $metadata{"modified"};


=pod

=head1 Usage

backup [options] files

Copy file(s) to a time-stamped subdirectory under I<$BACKUP_DIR>.

If environment variable I<$BACKUP_DIR> is not set, the backups are
created under I<\$HOME/backups>.

Each use of this command makes a new directory, named with a timestamp.
The requested I<files> are copied there, along with a note file
(named I<_backup_note.txt> by default).
The note file contains the time of the backup, the original command used,
the path of the working directory at the time, the hostname,
and any message provided via the I<--message> option.

The backup subdirectories are organized by year and month, for example:

    ~/Documents/BACKUPS/2013/2013-10/2013-10-03T11.09.29/

Options can be specified for the C<cp> command via the I<--cpOptions> option.


=head1 Options

(prefix 'no' to negate where applicable)

=over

=item * B<--cpOptions> I<opts>

Pass the specified options to the copy command (C<cp>).
Default: C<-a> (for BSD/MacOS and Linux, this makes C<cp> preserve
the timestamps, permissions, etc. of the copied file(s).

=item * B<--dryRun>

Show the files that would be backed up, and the generated note; but do not
actually copy anything. At present, however, the target directory is still created.

=item * B<--gitdiff>

Add the output of C<git diff --stat> to the note file (only when in a git repo).

=item * B<--message> I<text> OR B<-m> I<text>

An optional message to append to the I<_backup_note> file.

=item * B<--noteFile> I<filename>

Use I<filename> instead of I<_backup_note.txt> as the name for
the file with information about the backup.

=item * B<--quiet> OR B<-q>

Suppress most messages.

=item * B<--verbose>

Add more messages (repeatable).

=item * B<--version>

Show version info and exit.

=back


=head1 Known Bugs and Limitations

The generated note file isn't smart if you specify multiple directories
to be backed up. For example, each could be in a different git repo, but the
git root, commit it, and diff won't be generated for all of them.


=head1 To Do

    * Save git commit and branch info if applicable, or other VCS info.
        git rev-parse --show-toplevel
        git log -n 1 [file]
    * Alternate backup methods? git branch or stash; mailto; rsync!
    * Esp. for rsync, support remote destination.
    * Perhaps add a --dry-run option?
    * Add --warn-extension and/or --exclude? Use .gitignore?
    

=head1 History

    2006-12: Written by Steven J. DeRose (in bash).
    2008-01-23 sjd: Add -A so we notice hidden files.
    2010-03-16 sjd: Use $HOME env var.
    2010-03-22 sjd: Make link to latest dir to make easier to find.
    2012-01-31 sjd: Fix lack of -f on 'ln' command for 'latest'.
    2013-01-25 sjd: Port to Perl. Do subdirs by month.
    2017-04-20: Add --message, --cpOptions and default to cp -a.
    2021-02-12: New layout. Handle filenames with spaces, etc. Test --cpOptions '-r'.
    2021-06-09: Fix misquoting of multiple names.
    2022-04-27: Improve git info inserted into note.
    2022-05-09: Actually implement dry-run.
   

=head1 Rights

Copyright 2006-12 by Steven J. DeRose. This work is licensed under a
Creative Commons Attribution-Share Alike 3.0 Unported License.
For further information on this license, see
L<https://creativecommons.org/licenses/by-sa/3.0>.

For the most recent version, see L<http://www.derose.net/steve/utilities> or
L<https://github.com/sderose>.


=cut


###############################################################################
# Options
#
my $bdir = $ENV{BACKUP_DIR} || "$ENV{HOME}/backups";
my $cpOptions     = '-a';
my $dryRun        = 0;
my $gitdiff       = 1;
my $message       = '';
my $noteFile      = "_backup_note.txt";
my $quiet         = 0;
my $verbose       = 0;

my %getoptHash = (
    "bdir=s"         => \$bdir,
    "cpOptions=s"    => \$cpOptions,
    "dryRun!"        => \$dryRun,
    "gitdiff!"       => \$gitdiff,
    "h|help"         => sub {
        system "perldoc $0";
        print "Currently, your backup directory is '$bdir'.\n";
        exit;
    },
    "m|message=s"    => \$message,
    "q|quiet!"       => \$quiet,
    "v|verbose+"     => \$verbose,
    "version"        => sub {
        die "Version of $VERSION_DATE, by Steven J. DeRose.\n";
    },
);
Getopt::Long::Configure ("ignore_case");
GetOptions(%getoptHash) || die "Bad options.\n";

(scalar(@ARGV)) || die "No files specified!\n";

(-d "$bdir") || die "Backup dir '$bdir' does not exist.\n";


###############################################################################
# Main
#
for my $f (@ARGV) {
    chomp $f;
    if (!-e $f) {
        warn "'$f' not found!\n";
    }
    elsif (-d $f && $cpOptions !~ m/-r/) {
        warn "'$f' is a directory, and you didn't specify '-r' in --cpOptions.\n";
    }
}

my $args = my $qArgs = "";
foreach my $a (@ARGV) {
    $args .= " $a";
    $qArgs .= " '$a'";
}

my $date = `date +%Y\-%m\-%dT%H.%M.%S`;
chomp $date;
$date =~ m/^(....)-(..)/;
($2) || die "Couldn't parse date string '$date'\n";
my $year = $1;
my $month = $2;
my $subdir = "$bdir/$year/$year-$month/$date";

($verbose) && warn "Target dir: $subdir\n";

# Make the target dir
if (!-d $subdir) {
    system "mkdir -p '$subdir'";
    if (!-d $subdir ) {
        warn "backup: Can't find or mkdir backup subdirectory '$subdir'.";
        exit;
    }
}

# Make a note, to preserve source path and other state info:
#
my $note = makeNote($date, $args, $message);

if ($dryRun) {
    my $cmd = "ls -ld $qArgs";
    warn "Note to be included:\n$note\n";
    warn "\n======= dry run: Running in place of 'cp': $cmd\n";
    system $cmd || die "*** FAILED ***\n";
}
else {
    my $notePath="$subdir/$noteFile";
    if (!open(NOTES, ">$notePath")) {
        die "Couldn't write notes file at '$notePath'.\n";
    }
    print NOTES $note;
    close(NOTES);

    my $cmd = "cp $cpOptions $qArgs $subdir/";
    ($verbose) && warn "Running: $cmd\n";
    system $cmd || die "*** BACKUP FAILED ***\n";
    
    # Make a convenient link from 'latest'
    my $link = "$bdir/latest";
    if (-e $link) { system "rm $link"; }
    $cmd = "ln -f -s $subdir $link";
    ($verbose) && warn "Running: $cmd\n";
    system $cmd || warn "Link failed.\n";
    ($quiet) || report($subdir);
}
exit;

sub makeNote {
    my ($date, $args, $message) = @_;   
    my $host = `hostname`;
    my $note = qq@
    Time was:
        $date
    Hostname:
        $host
    Backup command was:
        $0 $args
    PWD at the time was:
        $ENV{PWD}
    @;
    
    my $gitRoot = `git rev-parse --show-toplevel 2>/dev/null`;
    if ($? == 128) {
        $gitRoot = "[not in a git repo]";
    }
    elsif ($?) {
        $gitRoot = "[git rev-parse failed (rc $?)";
    }
    else {
        $gitRoot .= "\n" . `git log -n 1`;
        if ($gitdiff) { $gitRoot .=  `git diff --stat`; }
    }    
    $note .= "Git repo:\n        $gitRoot\n";

    if ($message) { $note .= "Message:\n    $message\n"; }

    return $note;
}

sub report {
    my ($subdir) = @_;
    my $nfiles = `ls $subdir | wc -l`;
    chomp $nfiles;
    if ($nfiles) {
        warn "backup: " . ($nfiles-1) . " file(s) + note, " .
            "copied to $subdir\n    (linked from $bdir/latest).\n";
    }
    else {
        warn "backup: *** No files backed up ***\n";
    }
}
